##########################

Calculate Identical Codon Pairing and Co-tRNA Pairing
getPairing.py
Created By: Justin Miller 
Email: jmiller@byu.edu 

##########################

Purpose: Calculate identical codon pairing or co-tRNA pairing. Produce an output file of the frequency of pairing for each gene
	of each species Fasta file.

##########################

ARGUMENT OPTIONS:

	-h, --help           		Show this help message and exit
	-i  INPUT FILE				Input path to a Fasta file
	-id INPUT DIRECTORY    	 	Input path to a directory of Fasta files
	-od OUTPUT DIRECTORY    	Name of a directory for the pairing output files
	-t  NUMBER OF CORES			Specify the number of cores to use
	-f  RIBOSOME FOOTPRINT		Specify the size of the ribosomal window used the calculate pairing
	-c  CO-TRNA PAIRING			Do co-tRNA pairing instead of identical codon pairing
	-rna FLAG FOR RNA SEQUENCES Input Fasta files of RNA instead of DNA sequences

##########################

REQUIREMENTS:

getPairing.py uses Python version 2.7

Python libraries that must be installed include:
1. sys
2. os
2. argparse
3. re
4. Process, current_process, freeze_support, and Pool from multiprocessing

If any of those libraries is not currently in your Python Path, use the following command:
pip install --user [library_name]
to install the library to your path.

##########################

Input Directory:
This algorithm requires as input either a single Fasta file of the coding sequences of a species
	or a directory which contains multiple Fasta files.

Output File:
An output file is not required. If an output file is not supplied, the species matrix
	will be written to standard out.

##########################

USAGE:

Typical usage requires the -i or -id option.
The algorithm will use calculate the amount of identical codon pairing or co-tRNA pairing for
	each of the input files. The program will produce an output file for each input file
	containing the header line for each gene in the file, followed by a line for each codon used
	in the gene and the total times the codon was found along with the total times the codon was
	found in pairing. A codon is defined to be in pairing if it is located within the ribosomal
	footprint window of an identical codon.

Example input directory:
	See the example directory called mammals (located in the 'testFiles' directory).
	
By default, the species pairing data is first stored in memory and then written to the output file 
	or standard out.

By default, the algorithm calculates pairing values given a ribosomal window size of 9 codons.
	This behavior may be modified using the "-f" option followed by the number of codons that 
	the ribosome spans.

By default, the algorithm computes the matrix using identical codon pairing. To perform the analysis using co-tRNA pairing, include
	the "-c" option.

By default, the program accepts as input Fasta files of DNA coding sequences. To perform the analysis
	using RNA, include the "-rna" option.

By default, the program runs using all available cores. The "-t" option may be used to specify the
	number of cores the program will use.


Example usage:
python getPairing.py -id testFiles/mammals -od mammals_identical_codon_pairing -f 4
python getPairing.py -i mySpecies -c

Running the first of the above commands will produce an output directory with a file for each species
	in the vertebrate_mammals directory containing the identical codon pairing data, calculated
	with a ribosomal footprint of size 4 codons.

Running the second of the above commands will write to standard out the co-tRNA pairing data
	for mySpecies.


##########################

This algorithm is free for all academic and non-profit research purposes. 

We only ask that you please cite the following paper if you use this algorithm:
CODON PAIRS ARE PHYLOGENETICALLY CONSERVED: Codon pairing as a novel phylogenetic character state for parsimony and alignment-free methods 

For any for-profit usage, please contact Justin Miller at jmiller@byu.edu.

##########################

Thank you, and happy researching!!

